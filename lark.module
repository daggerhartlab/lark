<?php

use Drupal\Core\DependencyInjection\ClassResolverInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Extension\ExtensionPathResolver;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;

require_once __DIR__ . '/lark.theme.inc';

/**
 * Implements hook_help().
 */
function lark_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.lark':
      $output = _lark_readme_to_html();
      return $output;
  }
}
/**
 * Implements hook_theme().
 */
function lark_theme() {
  return [
    'toggle_row_table' => [
      'variables' => [
        'header' => NULL,
        'rows' => NULL,
        'footer' => NULL,
        'attributes' => [],
        'caption' => NULL,
        'colgroups' => [],
        'sticky' => FALSE,
        'responsive' => TRUE,
        'empty' => '',
        'toggle_handle_header' => NULL,
        'toggle_handle_open' => NULL,
        'toggle_handle_close' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function lark_entity_type_alter(array &$entity_types) {
  /**
   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
   * @var \Drupal\lark\Routing\EntityTypeInfo $entity_type_info
   */
  $class_resolver = \Drupal::service(ClassResolverInterface::class);
  $entity_type_info = $class_resolver->getInstanceFromDefinition(\Drupal\lark\Routing\EntityTypeInfo::class);
  return $entity_type_info->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_operation()
 */
function lark_entity_operation(EntityInterface $entity) {
  /**
   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
   * @var \Drupal\lark\Routing\EntityTypeInfo $entity_type_info
   */
  $class_resolver = \Drupal::service(ClassResolverInterface::class);
  $entity_type_info = $class_resolver->getInstanceFromDefinition(\Drupal\lark\Routing\EntityTypeInfo::class);
  return $entity_type_info->entityOperation($entity);
}

/**
 * Implements hook_file_download().
 */
function lark_file_download($uri) {
  $scheme = StreamWrapperManager::getScheme($uri);
  $target = StreamWrapperManager::getTarget($uri);
  $targets = ['lark-export.tar.gz', 'lark-source.tar.gz'];
  if ($scheme == 'temporary' && in_array($target, $targets)) {
    if (\Drupal::currentUser()->hasPermission('lark export entity')) {
      $request = \Drupal::request();
      $date = DateTime::createFromFormat('U', $request->server->get('REQUEST_TIME'));
      $date_string = $date->format('YmdHi');
      $hostname = str_replace('.', '-', $request->getHttpHost());
      $prefix = str_replace('.tar.gz', '', $target);
      $filename = "{$prefix}--{$hostname}--{$date_string}.tar.gz";
      $disposition = 'attachment; filename="' . $filename . '"';
      return [
        'Content-disposition' => $disposition,
      ];
    }
    return -1;
  }
}

/**
 * Convert readme to html.
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 * @throws \League\CommonMark\Exception\CommonMarkException
 */
function _lark_readme_to_html() {
  $path_resolver = \Drupal::service(ExtensionPathResolver::class);
  $readme_path = $path_resolver->getPath('module', 'lark') . '/README.md';
  if (\file_exists($readme_path)) {
    // Remove first line to prevent a double H1.
    $content = \file_get_contents($readme_path);
    $lines = explode("\n", $content);
    array_shift($lines);
    $content = implode("\n", $lines);

    if (class_exists('\League\CommonMark\GithubFlavoredMarkdownConverter')) {
      $converter = new League\CommonMark\GithubFlavoredMarkdownConverter([
        'html_input' => 'strip',
        'allow_unsafe_links' => FALSE,
      ]);
      $content = $converter->convert($content);
    }

    return Markup::create($content);
  }

  return '';
}
